#!/bin/bash

KUBECTL_TMPFILE="/tmp/kubectl-hhl.tmpfile"
_find_ns() {
    if test -n "$2";then
        kubectl get $1 --all-namespaces | awk -v p=$2 '{if ($2 == p) {print $1}}'
    fi
}

_k_do() {
    local action=$1
    local kind=$2
    local object=$3
    shift 3

    local ns=
    if [ "$kind" = node ];then
        ns=default
    else
        ns=$(_find_ns "$kind" "$object")
    fi

    if test -n "$ns";then
        if [ "$action" = logs ];then
            kind=
        elif [ "$action" = exec ];then
            kind=
            set -- -- "$@"
        fi

        echo kubectl -n $ns $action $kind $object $@
        kubectl -n $ns $action $kind $object $@
    else
        echo "can not find namespace for: $@"
        return
    fi
}

_kddps() {
    local tmpfile=$KUBECTL_TMPFILE
    kubectl get pods --all-namespaces -o custom-columns=.:.metadata.name,.:.status.hostIP > $tmpfile
    while test -n "$1"
    do
        grep -- "$1" $tmpfile >$tmpfile-tmp
        /usr/bin/mv $tmpfile-tmp $tmpfile
        shift
    done

    cat $tmpfile
    echo " ** The above pods will be deleted **"
    read -N 1 -p " ** press any 'y' to continue **  " r
    echo ""
    [ "$r" != y ] && return
    while read pod other
    do
        _k_do delete pod $pod
    done < $tmpfile

}
_k_get() {
    local kind=$1
    local object=$2
    shift 2
    if test -n "$object";then
        _k_do get "$kind" "$object" "$@"
    else
        kubectl get "$kind" --all-namespaces -o wide
    fi

}

## get 
alias kgp='_k_get pod'
alias kgs='_k_get svc'
alias kgd='_k_get deployment'
alias kgn='_k_get node'
alias kga='_k_get all'

## delete
alias kddps='_kddps'
alias kddp='_k_do delete pod'
alias kdds='_k_do delete svc'
alias kddd='_k_do delete deployment'

## describe
alias kdp='_k_do describe pod'
alias kds='_k_do describe svc'
alias kdd='_k_do describe deployment'
alias kdn='_k_do describe node'

## edit
alias kep='_k_do edit pod'
alias kes='_k_do edit svc'
alias ked='_k_do edit deployment'

## log
alias klp="_k_do logs pod"

## kubectl -n kube-system
alias ks='kubectl -n kube-system'


alias ke='_k_do exec pod'
alias kcf='kubectl create -f'


############ contiv ETCD =================
alias cetcd="etcdctl --endpoint http://0.0.0.0:6666"
ETCDCTL="etcdctl --endpoint http://0.0.0.0:6666"
_cetcd_ls() {
    test -z "$1" && set -- obj oper state
    
    echo "================"
    while test -n "$1"
    do
        $ETCDCTL ls -r /contiv.io/"$1"
        shift
        echo ""
    done
}

CETCD_TMPFILE="/tmp/cetcdh-get.tmpfile"
_cetcd_find_internal() {
    local tmpfile=$CETCD_TMPFILE
    _cetcd_ls > $tmpfile

    while test -n "$1"
    do
        grep -- "$1" $tmpfile >$tmpfile-tmp
        /usr/bin/mv $tmpfile-tmp $tmpfile
        shift
    done
}

_cetcd_find() {
    echo "================"
    _cetcd_find_internal "$@"
    cat $CETCD_TMPFILE
}

_cetcd_get() {
    local tmpfile=$CETCD_TMPFILE

    confirm=1
    format=0

    while test -n "$1"
    do
        if [ "$1" = "-f" ];then
            format=1
        elif [ "$1" = "-y" ];then
            confirm=0
        else
            break
        fi
        shift
    done

    _cetcd_find_internal "$@"

    if [ "$confirm" = 1 ];then
        cat $tmpfile
        echo " ** The above keys will be displayed **"
        read -N 1 -p " ** press any 'y' to continue **  " r
        echo ""
        [ "$r" != y ] && return
    fi

    echo "================"
    while read line
    do
        echo "## $line ##"
        if [ "$format" = 1 ];then
            $ETCDCTL get $line | jq .
        else
            $ETCDCTL get $line
        fi
        echo ""
    done <$tmpfile
}

_cetcd_main() {
    if [ "$1" = l ];then
        shift
        _cetcd_ls "$@"
    elif [ "$1" = g ];then
        shift
        _cetcd_get "$@"
    elif [ "$1" = f ];then
        shift
        _cetcd_find "$@"
    else
        echo "  help: "
        echo "        cetcdh l [state|oper|obj] ..."
        echo "        cetcdh f [pattern] ..."
        echo "        cetcdh g [-y] [-f] [pattern] ..."
    fi
}

alias cetcdh="_cetcd_main"
